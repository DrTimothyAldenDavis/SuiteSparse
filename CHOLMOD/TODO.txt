FIXME TODO: for CHOLMOD 5.1.0:

MATLAB/*    add a flag to convert double to single, just for testing
            (return results as double)

Doc/        user guide;  see NEW in cholmod.h


Instructions for BLAS benchmarking:

1) get the test matrix.  See https://sparse.tamu.edu/ND/nd12k .
    Get the nd12k.mtx (Matrix Market) and uncompress it.
    Place it as ~/nd12k.mtx.

2) get and compile SuiteSparse, including CHOLMOD:

        git clone https://github.com/DrTimothyAldenDavis/SuiteSparse.git
        cd SuiteSparse
        git checkout blasdev2
        make

    The 'make' will take a while to build GraphBLAS: you can skip
    that if you like.

3) run the CHOLMOD benchmarks outside of MATLAB

        cd CHOLMOD
        make large

    see results in ./build/*_nd12k.out.txt.  Note the BLAS selected,
    as shown by the cmake output.

    You can also do 'make demo' or 'make test' in the CHOLMOD folder
    to run a short demo and a short test.

4) compile the MATLAB interface to CHOLMOD, in MATLAB, do:

        cd SuiteSparse
        SuiteSparse_install

    You will see errors compiling SPEX (ignore those; it's a build system
    issue that is in progress).

    You can also ignore the GraphBLAS error (libgraphblas_matlab.so must
    be compiled first).

    You can skip the SuiteSparse demo (hit 'n').

    To compile just CHOLMOD in MATLAB, do

        cd SuiteSparse/CHOLMOD/MATLAB
        cholmod_make

5) benchmark CHOLMOD in MATLAB:

        cd CHOLMOD/MATLAB
        go_nd12k


To get more details:

    in CHOLMOD/MATLAB/cholmod2.c, add this after #include "sputil2.h"

        #undef SPUMONI
        #define SPUMONI 1

    to print a summary of the # of calls to the BLAS and total BLAS time,
    edit CHOLMOD/Include/cholmod_install.h, and uncomment this line:

        // #define BLAS_TIMER

    to generate a large csv file with each call to the BLAS,
    uncomment this line:

        // #define BLAS_DUMP

    then recompile CHOLMOD, either inside MATLAB with cholmod_make,
    or outside of MATLAB with

        cd SuiteSparse/CHOLMOD
        make
        make large

    The BLAS_DUMP flag, if defined, will write a 1-line summary of each
    BLAS call to the blas_dump.txt file in the current directory, which can be
    loaded into MATLAB with 'load blas_dump.txt'.  Subsequent calls to
    CHOLMOD will append to this file.

    Each line contains the 10 space-delimited values:

        kernel      see blas_legend.txt (0 to 15)
        4 or 8      sizeof (blas integer), always 8 for MATLAB
        4 or 8      size of the index in a sparse matrix, always 8 for MATLAB;
                    cholmod_*i_simple will report 4.
        m,n,k       sizes of the matrices (0 if not used)
        lda,ldb,ldc leading dimensions (0 if not used)
        time        time for this call to the BLAS / LAPACK

    Some blas calls do not have 6 integers that define their size.
    See blas_legend.txt.  For example, for dpotrf, the 'm n k'
    is printed as 'n 0 0' and 'lda ldb ldc' is just 'lda 0 0'.

    The calls to the BLAS appear in the order they were made.

    The "make large" target does 2 supernodal factorizations, the first
    in double and the 2nd in single:

	./build/cholmod_dl_simple < ~/nd12k.mtx > ./build/dl_nd12k.out.txt
	./build/cholmod_sl_simple < ~/nd12k.mtx > ./build/sl_nd12k.out.txt

    So the first 3900 lines of blas_dump.txt in the ./CHOLMOD folder
    is from the double precision supernodal factorization, and the
    2nd set of 3900 lines is the single precision supernodal factorization.

    In the ./CHOLMOD/MATLAB folder, the go_nd12k.m script solves the
    same 2 problems, in the same order.

If you run the tests, you'll want to first rename or delete the existing
blas_dump.txt files, since subsequent runs just append their results to
those files.

